Namespace: blackjack

TO DO:
- Ordne crash, som forekommer ved gentagen fejlinput til valg af antal spillere.
- Ordne tilfælde, hvor ingen spillere har fundet.

Card(int i)
// - string: name // sættes med funktion?
// - enum: colour
// - enum: suit
- int: value = i

Stack
- list<card>: cards
- Draw() // returns top card and removes it from the stack
    // cards.pop()
- Add() // Add a card
    // cards.append(x)
- Shuffle() // loads 52 cards in random order.
    // Dobbelt for loop for i = 1 til 4, j = 1 til 13 (hvor 11-13 får værdi 10)
        // v = j
        // Hvis j>10, så v = 10
        // c = new Card(v)
        // cards.append(c)
    // from random import shuffle / import random
    // random.shuffle(cards)

Player(stack s)
- int: score
- bool: playing = false
- stack: stack = s
- Action() : card // user input giver kort eller break
    // print("Draw or pass? D/P")
    // in = input().upper()
    // If in = "D"
        // Evaluate (s.Draw())
    // Elif in = "P"
        // playing = false
    // Else
        // print("Invalid input, try again!"), Action()
- Evaluate (card)
- Turn() // Styrer Turn flow. Kalder action og evaluate. Draw or pass
    // playing = true
    // while playing
        // Action()

Game
// Læs evt. om State Machine design pattern på:
// http://python-3-patterns-idioms-test.readthedocs.io/en/latest/StateMachine.html
- list<player>: players
- Setup() // Hvor mange spillere?
- Initialize() // Laver stack og spillere.
- Run() // Evaluerer til sidst alle spilleres score og udråber en vinder.
- Play() // Kalder ovenstående funktioner.

// Test:
s = new Stack
s.Shuffle()
p.Turn()

Ressourcer:
random.shuffle(list)
random.sample(list, len(list))

try:
    // Noget
except ValueError as e: // f.eks
    print "Nope!", e